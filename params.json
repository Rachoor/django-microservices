{
  "name": "Django-microservices",
  "tagline": "Simple django package to easily manage your microservices.",
  "body": "# django-microservices\r\n\r\n## About\r\nSimple django package to easily \"connect\" microservices.\r\n\r\nThe package loads the service configurations (id, name, host) into a DB table from a json file which can be stored on a shared drive, or hosted on URL.\r\n\r\n## Installation\r\nYou can simply install the package with pip from **PyPI** or **GitHub**.\r\n\r\n**Install with pip from github**\r\n\r\n`pip install git+https://github.com/gabor-boros/django-microservices.git`\r\n\r\n**Install from pypi**\r\n\r\n`pip install djangomicroservices`\r\n\r\n## Configuration\r\nAdd the `microservices` app to your `INSTALLED_APPS` like this:\r\n\r\n```\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'microservices',\r\n    ...\r\n]\r\n```\r\n\r\nAfter you added it to the `INSTALLED_APPS`, you **must** configure the path where your service configuration exists.\r\nThe configuration file is a `json` file. Basically it is an output of `python manage.py dumpdata` command.\r\nIt doesn't matter where is your file located. It can be hosted on a website, or located on a *shared* drive.\r\n\r\n```\r\nSERVICE_CONFIGURATION_FILE = 'http://myserver.com/services.json'\r\n```\r\n\r\nor\r\n\r\n```\r\nSERVICE_CONFIGURATION_FILE = 'services.json'\r\n```\r\n\r\n**Service configuration example**\r\n*sample.json*\r\n```\r\n[\r\n    {\r\n        \"model\": \"microservices.service\",\r\n        \"pk\": 1,\r\n        \"fields\": {\r\n            \"name\": \"auth\",\r\n            \"host\": \"http://auth.example.com/\",\r\n        }\r\n    },\r\n    {\r\n        \"model\": \"microservices.service\",\r\n        \"pk\": 2,\r\n        \"fields\": {\r\n            \"name\": \"search\",\r\n            \"host\": \"http://search.example.com/\",\r\n        }\r\n    }\r\n]\r\n```\r\n\r\n## Usage\r\nAfter you are done with the installation and configuration, and you loaded your services, you are good to go.\r\nThe usage is very simple. Query your service, and call the `remote_call` object method.\r\n\r\n**Remote call example**\r\n```\r\nimport json\r\nfrom microservices.models import Service\r\n\r\ndef can_login(username, password):\r\n    authentication_data = json.loads({\"username\": username: \"password\": password})\r\n\r\n    authentication_service = Service.objects.get(name=\"auth\")\r\n    response = authentication_service.remote_call(\r\n        method, api='/login/', data=authentication_data\r\n    )\r\n\r\n    if response.status_code == 200:\r\n        return True\r\n\r\n    return False\r\n\r\n```\r\n\r\nThe package ships with an other object method called `update_availability`. This method can be used to update your service's status.\r\nTo do this you can call it for the object as shown in the example below.\r\n\r\n**NOTE**\r\nIf the response code is 400, 404, 500 or 503, the value of `is_available` field will be `False`.\r\n\r\n**Update service status**\r\n```\r\nfrom microservices.models import Service\r\n\r\nfor service in Service.objects.all():\r\n    service.update_availability()\r\n\r\n```\r\n\r\n## Management commands\r\nThree management command ships with this package to help to manage your service configuration.\r\n\r\n* `list_services` - Lists your services ordered by their status\r\n* `load_services` - Loads the configuration from the given resource location, set in `settings.py`\r\n* `check_services` - Going thorough your configuration and tries to reach them.\r\n    * If the host sends any response (which is not error related), the service will be marked available\r\n    * If the response is an error, or the service can not be reached, the service's status will be unavailable\r\n\r\n## Tests\r\nTo run the tests for this package use the `python manage.py test` command as usual\r\nIn case you would like to generate a **coverage** report as well, run the `run_test_coverage.sh` file.\r\n\r\n## Contributors\r\nIf you would like to help to develop this package please read the CONTRIBUTING guideline. Every PR is highly welcomed.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}